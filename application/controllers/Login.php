<?phpdefined('BASEPATH') OR exit('No direct script access allowed');/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of Login * * @author MD. Mashfiq */class Login extends CI_Controller {    //put your code here    function __construct() {        parent::__construct();        $this->load->helper(array('form', 'url'));        $this->load->library('form_validation');        $this->load->helper('security');        $this->load->library('tank_auth');        $this->lang->load('tank_auth');    }    function index() {        $data['SITE'] = $this->config->item('SITE');        $data['DEVELOPER'] = $this->config->item('DEVELOPER');        $data['title'] = $data['SITE']['name'] . ' | ' . "Login Please";        $data['theme_asset_url'] = base_url() . $this->config->item('THEME_ASSET');        if ($this->tank_auth->is_logged_in()) {         // logged in            redirect('/admin');        } elseif ($this->tank_auth->is_logged_in(FALSE)) {      // logged in, not activated            redirect('/auth/send_again/');        } else {            $data['login_by_username'] = ($this->config->item('login_by_username', 'tank_auth') AND                    $this->config->item('use_username', 'tank_auth'));            $data['login_by_email'] = $this->config->item('login_by_email', 'tank_auth');            $this->form_validation->set_rules('login', 'Login', 'trim|required|xss_clean');            $this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');            $this->form_validation->set_rules('remember', 'Remember me', 'integer');            // Get login for counting attempts to login            if ($this->config->item('login_count_attempts', 'tank_auth') AND ( $login = $this->input->post('login'))) {                $login = $this->security->xss_clean($login);            } else {                $login = '';            }//            $data['use_recaptcha'] = $this->config->item('use_recaptcha', 'tank_auth');            $data['use_recaptcha'] = FALSE;;            if ($this->tank_auth->is_max_login_attempts_exceeded($login)) {                if ($data['use_recaptcha'])                    $this->form_validation->set_rules('recaptcha_response_field', 'Confirmation Code', 'trim|xss_clean|required|callback__check_recaptcha');                else                    $this->form_validation->set_rules('captcha', 'Confirmation Code', 'trim|xss_clean|required|callback__check_captcha');            }            $data['errors'] = array();            if ($this->form_validation->run()) {        // validation ok                if ($this->tank_auth->login(                                $this->form_validation->set_value('login'), $this->form_validation->set_value('password'), $this->form_validation->set_value('remember'), $data['login_by_username'], $data['login_by_email']) && $this->session->userdata('user_type')==1) {        // success                    redirect('/admin');                } else {                    $errors = $this->tank_auth->get_error_message();                    if (isset($errors['banned'])) {        // banned user                        $this->_show_message($this->lang->line('auth_message_banned') . ' ' . $errors['banned']);                    } elseif (isset($errors['not_activated'])) {    // not activated user                        redirect('/auth/send_again/');                    } else {             // fail                        foreach ($errors as $k => $v)                            $data['errors'][$k] = $this->lang->line($v);                    }                }            }            $data['show_captcha'] = FALSE;            if ($this->tank_auth->is_max_login_attempts_exceeded($login)) {                $data['show_captcha'] = TRUE;                if ($data['use_recaptcha']) {                    $data['recaptcha_html'] = $this->_create_recaptcha();                } else {                    $data['captcha_html'] = $this->_create_captcha();                }            }            $this->load->view($this->config->item('LOGIN_THEME') . "login", $data);        }    }    /**     * Logout user     *     * @return void     */    function logout() {                unset($_SESSION);        $this->tank_auth->logout();        $this->_show_message($this->lang->line('auth_message_logged_out'));    }    /**     * Show info message     *     * @param	string     * @return	void     */    function _show_message($message) {        $this->session->set_flashdata('message', $message);        redirect('/login/');    }    /**     * Create CAPTCHA image to verify user as a human     *     * @return	string     */    function _create_captcha() {        $this->load->helper('captcha');        $cap = create_captcha(array(            'img_path' => './' . $this->config->item('captcha_path', 'tank_auth'),            'img_url' => base_url() . $this->config->item('captcha_path', 'tank_auth'),            'font_path' => './' . $this->config->item('captcha_fonts_path', 'tank_auth'),            'font_size' => $this->config->item('captcha_font_size', 'tank_auth'),            'img_width' => $this->config->item('captcha_width', 'tank_auth'),            'img_height' => $this->config->item('captcha_height', 'tank_auth'),            'show_grid' => $this->config->item('captcha_grid', 'tank_auth'),            'expiration' => $this->config->item('captcha_expire', 'tank_auth'),        ));        // Save captcha params in session        $this->session->set_flashdata(array(            'captcha_word' => $cap['word'],            'captcha_time' => $cap['time'],        ));        return $cap['image'];    }    /**     * Callback function. Check if CAPTCHA test is passed.     *     * @param	string     * @return	bool     */    function _check_captcha($code) {        $time = $this->session->flashdata('captcha_time');        $word = $this->session->flashdata('captcha_word');        list($usec, $sec) = explode(" ", microtime());        $now = ((float) $usec + (float) $sec);        if ($now - $time > $this->config->item('captcha_expire', 'tank_auth')) {            $this->form_validation->set_message('_check_captcha', $this->lang->line('auth_captcha_expired'));            return FALSE;        } elseif (($this->config->item('captcha_case_sensitive', 'tank_auth') AND                $code != $word) OR                strtolower($code) != strtolower($word)) {            $this->form_validation->set_message('_check_captcha', $this->lang->line('auth_incorrect_captcha'));            return FALSE;        }        return TRUE;    }    /**     * Create reCAPTCHA JS and non-JS HTML to verify user as a human     *     * @return	string     */    function _create_recaptcha() {        $this->load->helper('recaptcha');        // Add custom theme so we can get only image        $options = "<script>var RecaptchaOptions = {theme: 'custom', custom_theme_widget: 'recaptcha_widget'};</script>\n";        // Get reCAPTCHA JS and non-JS HTML        $html = recaptcha_get_html($this->config->item('recaptcha_public_key', 'tank_auth'));        return $options . $html;    }    /**     * Callback function. Check if reCAPTCHA test is passed.     *     * @return	bool     */    function _check_recaptcha() {        $this->load->helper('recaptcha');        $resp = recaptcha_check_answer($this->config->item('recaptcha_private_key', 'tank_auth'), $_SERVER['REMOTE_ADDR'], $_POST['recaptcha_challenge_field'], $_POST['recaptcha_response_field']);        if (!$resp->is_valid) {            $this->form_validation->set_message('_check_recaptcha', $this->lang->line('auth_incorrect_captcha'));            return FALSE;        }        return TRUE;    }         /**     * Generate reset code (to change password) and send it to user     *     * @return void     */    function forgot_password() {//        if ($this->tank_auth->is_logged_in()) {         // logged in//            redirect('');//        } elseif ($this->tank_auth->is_logged_in(FALSE)) {      // logged in, not activated//            redirect('/auth/send_again/');//        } else {        $btn = $this->input->post('btn');        if (isset($btn)) {//            $this->form_validation->set_rules('login', 'Email or login', 'trim|required|xss_clean');            $this->form_validation->set_rules('email', 'Email', 'required|valid_email|min_length[5]|max_length[125]');            $data['errors'] = array();            if ($this->form_validation->run()) {        // validation ok                                if (!is_null($data = $this->tank_auth->forgot_password(                                $this->form_validation->set_value('email')))) {                    $data['site_name'] = $this->config->item('website_name', 'tank_auth');//                    print_r($data);exit();                    // Send email with password activation link                    $this->_send_email('forgot_password', $data['email'], $data);//                    $this->_show_message($this->lang->line('auth_message_new_password_sent'));                } else {                    $errors = $this->tank_auth->get_error_message();                    foreach ($errors as $k => $v)                        $data['errors'][$k] = $this->lang->line($v);                }            }            redirect('admin');        }        $data['SITE'] = $this->config->item('SITE');        $data['DEVELOPER'] = $this->config->item('DEVELOPER');        $data['title'] = $data['SITE']['name'] . ' | ' . "Login Please";        $data['login_theme_asset_url'] = base_url() . $this->config->item('ASSET_FOLDER') . $this->config->item('LOGIN_THEME');        $this->load->view($this->config->item('LOGIN_THEME') . "forgot_password", $data);//        $this->load->view('forgot_password_form', $data);    }    //          /**     * Send email message of given type (activate, forgot_password, etc.)     *     * @param	string     * @param	string     * @param	array     * @return	void     */    function _send_email($type, $email, &$data) {        $this->load->library('email');        $this->email->from($this->config->item('webmaster_email', 'tank_auth'), $this->config->item('website_name', 'tank_auth'));        $this->email->reply_to($this->config->item('webmaster_email', 'tank_auth'), $this->config->item('website_name', 'tank_auth'));        $this->email->to($email);        $this->email->subject(sprintf($this->lang->line('auth_subject_' . $type), $this->config->item('website_name', 'tank_auth')));        $this->email->message($this->load->view('email/' . $type . '-html', $data, TRUE));        $this->email->set_alt_message($this->load->view('email/' . $type . '-txt', $data, TRUE));        $this->email->send();    }            /**     * Replace user password (forgotten) with a new one (set by user).     * User is verified by user_id and authentication code in the URL.     * Can be called by clicking on link in mail.     *     * @return void     */    function reset_password() {        $this->load->helper('security');        $user_id = $this->uri->segment(3);        $new_pass_key = $this->uri->segment(4);//        $this->form_validation->set_rules('new_password', 'New Password', 'trim|required|xss_clean|min_length[' . $this->config->item('password_min_length', 'tank_auth') . ']|max_length[' . $this->config->item('password_max_length', 'tank_auth') . ']|alpha_dash');$this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');        $this->form_validation->set_rules('new_password', 'New Password', 'trim|required|xss_clean');        $this->form_validation->set_rules('confirm_new_password', 'Confirm new Password', 'trim|required|xss_clean|matches[new_password]');        $data['errors'] = array();        if ($this->form_validation->run()) {        // validation ok            if (!is_null($data = $this->tank_auth->reset_password(                            $user_id, $new_pass_key, $this->form_validation->set_value('new_password')))) { // success                $data['site_name'] = $this->config->item('website_name', 'tank_auth');//                print_r($data);exit();                // Send email with new password                $this->_send_email('reset_password', $data['email'], $data);                redirect('admin');//                $this->_show_message($this->lang->line('auth_message_new_password_activated') . ' ' . anchor('/auth/login/', 'Login'));            } else {              // fail//                $this->_show_message($this->lang->line('auth_message_new_password_failed'));            }        } else {            // Try to activate user by password key (if not activated yet)            if ($this->config->item('email_activation', 'tank_auth')) {                $this->tank_auth->activate_user($user_id, $new_pass_key, FALSE);            }            if (!$this->tank_auth->can_reset_password($user_id, $new_pass_key)) {//                $this->_show_message($this->lang->line('auth_message_new_password_failed'));            }        }        $data['SITE'] = $this->config->item('SITE');        $data['DEVELOPER'] = $this->config->item('DEVELOPER');        $data['title'] = $data['SITE']['name'] . ' | ' . "Login Please";        $data['login_theme_asset_url'] = base_url() . $this->config->item('ASSET_FOLDER') . $this->config->item('LOGIN_THEME');        $this->load->view($this->config->item('LOGIN_THEME') . "reset_password", $data);//        $this->load->view('reset_password_form', $data);    }    function register()    {        if ($this->tank_auth->is_logged_in()) {									// logged in            redirect('');        } elseif ($this->tank_auth->is_logged_in(FALSE)) {						// logged in, not activated            redirect('/auth/send_again/');        } elseif (!$this->config->item('allow_registration', 'tank_auth')) {	// registration is off            $this->_show_message($this->lang->line('auth_message_registration_disabled'));        } else {            $use_username = $this->config->item('use_username', 'tank_auth');            if ($use_username) {                $this->form_validation->set_rules('username', 'Username', 'trim|required|xss_clean|min_length['.$this->config->item('username_min_length', 'tank_auth').']|max_length['.$this->config->item('username_max_length', 'tank_auth').']|alpha_dash');            }            $this->form_validation->set_rules('email', 'Email', 'trim|required|xss_clean|valid_email');            $this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean|min_length['.$this->config->item('password_min_length', 'tank_auth').']|max_length['.$this->config->item('password_max_length', 'tank_auth').']|alpha_dash');            $this->form_validation->set_rules('confirm_password', 'Confirm Password', 'trim|required|xss_clean|matches[password]');            $captcha_registration	= $this->config->item('captcha_registration', 'tank_auth');            $use_recaptcha			= $this->config->item('use_recaptcha', 'tank_auth');            if ($captcha_registration) {                if ($use_recaptcha) {                    $this->form_validation->set_rules('recaptcha_response_field', 'Confirmation Code', 'trim|xss_clean|required|callback__check_recaptcha');                } else {                    $this->form_validation->set_rules('captcha', 'Confirmation Code', 'trim|xss_clean|required|callback__check_captcha');                }            }            $data['errors'] = array();            $email_activation = $this->config->item('email_activation', 'tank_auth');            if ($this->form_validation->run()) {								// validation ok                if (!is_null($data = $this->tank_auth->create_user(                    $use_username ? $this->form_validation->set_value('username') : '',                    $this->form_validation->set_value('email'),                    $this->form_validation->set_value('password'),                    $email_activation))) {									// success                    $data['site_name'] = $this->config->item('website_name', 'tank_auth');                    if ($email_activation) {									// send "activate" email                        $data['activation_period'] = $this->config->item('email_activation_expire', 'tank_auth') / 3600;                        $this->_send_email('activate', $data['email'], $data);                        unset($data['password']); // Clear password (just for any case)                        $this->_show_message($this->lang->line('auth_message_registration_completed_1'));                    } else {                        if ($this->config->item('email_account_details', 'tank_auth')) {	// send "welcome" email                            $this->_send_email('welcome', $data['email'], $data);                        }                        unset($data['password']); // Clear password (just for any case)                        $this->_show_message($this->lang->line('auth_message_registration_completed_2').' '.anchor('/auth/login/', 'Login'));                    }                } else {                    $errors = $this->tank_auth->get_error_message();                    foreach ($errors as $k => $v)	$data['errors'][$k] = $this->lang->line($v);                }            }            if ($captcha_registration) {                if ($use_recaptcha) {                    $data['recaptcha_html'] = $this->_create_recaptcha();                } else {                    $data['captcha_html'] = $this->_create_captcha();                }            }            $data['use_username'] = $use_username;            $data['captcha_registration'] = $captcha_registration;            $data['use_recaptcha'] = $use_recaptcha;            $this->load->view('auth/register_form', $data);        }    }}